#pragma comment(linker, "/SUBSYSTEM:windows /ENTRY:mainCRTStartup")
#include <iostream>
#include <raylib.h>
#include <time.h>
#include <math.h>
Color Green = Color{38,185,154,255};
Color Dark_Green = Color{ 20,160,133,255 };
Color Light_Green = Color{ 129,204,184,255 };
Color Light_White = Color { 255, 255, 247 };
int main(int BORN);
void canILiveThisWorld(int life);
void loop();
using namespace std;
const int screen_width = 700;
const int screen_height = 700;
int COL = 3;
int ROW = 3;
const int cellWidth = screen_width / ROW;
const int cellHeight = screen_height / COL;
int COUNT = 0, FLAG = 0, BORN = -1;
bool whoamI, x;
float a, b;
int toggle[3][3] = { {0, 0, 0},
                    {0, 0, 0},
                    {0, 0, 0} };
Texture2D gameC, gameD;
class clicked
{
public:
    bool WhoseTurn()
    {
        if (COUNT % 2 == 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    void printMyExistence()
    {
        if (IsMouseButtonPressed(MOUSE_BUTTON_LEFT))
        {

            a = GetMouseX();
            b = GetMouseY();
            // 00
            if (a < cellWidth && b < cellHeight && a < 2 * cellWidth && a < 3 * cellWidth)
            {
                if (toggle[0][0] == 1 || toggle[0][0] == 2)
                {
                    // DrawText("This Slot is Already Used", 233, 10, 20, WHITE);
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, (cellWidth / 2) - 75, (cellWidth / 2) - 75, RED);
                        COUNT++;
                        toggle[0][0] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, (cellWidth / 2) - 50, (cellWidth / 2) - 50, BLUE);
                        COUNT++;
                        toggle[0][0] = 2;
                        FLAG++;
                    }
                }

            } // 01
            else if (a < 2 * cellWidth && b < cellHeight && a > cellWidth && a < 3 * cellWidth)
            {
                if (toggle[0][1] == 1 || toggle[0][1] == 2)
                {
                    // cout << "This Slot is Already Booked";
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, (2 * cellWidth / 2) + 35, (cellHeight / 2) - 75, RED);
                        COUNT++;
                        toggle[0][1] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, (cellWidth)+55, (cellHeight / 2) - 55, BLUE);
                        COUNT++;
                        toggle[0][1] = 2;
                        FLAG++;
                    }
                }
            } // 02
            else if (a < 3 * cellWidth && b < cellHeight && a > cellWidth && a > 2 * cellWidth)
            {
                if (toggle[0][2] == 1 || toggle[0][2] == 2)
                {
                    // cout << "This Slot is Already Booked";
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, (cellWidth * 2) + 35, (cellHeight / 2) - 75, RED);
                        COUNT++;
                        toggle[0][2] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, (cellWidth * 2) + 55, (cellHeight / 2) - 55, BLUE);
                        COUNT++;
                        toggle[0][2] = 2;
                        FLAG++;
                    }
                }
            } // 2nd row start //10
            else if (a < cellWidth && b < 2 * cellHeight && a < 2 * cellWidth && a < 3 * cellWidth && b > cellHeight && b < 3 * cellHeight)
            {
                if (toggle[1][0] == 1 || toggle[1][0] == 2)
                {
                    // cout << "This Slot is Already Booked";
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, (cellWidth / 2) - 75, (cellHeight)+40, RED);
                        COUNT++;
                        toggle[1][0] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, (cellWidth / 2) - 50, (cellHeight)+60, BLUE);
                        COUNT++;
                        toggle[1][0] = 2;
                        FLAG++;
                    }
                }
            } // 11
            else if (a > cellWidth && b < 2 * cellHeight && a < 2 * cellWidth && a < 3 * cellWidth && b > cellHeight && b < 3 * cellHeight)
            {
                if (toggle[1][1] == 1 || toggle[1][1] == 2)
                {
                    // cout << "This Slot is Already Booked";
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, cellWidth + 15, cellHeight + 35, RED);
                        COUNT++;
                        toggle[1][1] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, cellWidth + 55, cellHeight + 55, BLUE);
                        COUNT++;
                        toggle[1][1] = 2;
                        FLAG++;
                    }
                }
            } // 12
            else if (a > cellWidth && b < 2 * cellHeight && a > 2 * cellWidth && a < 3 * cellWidth && b > cellHeight && b < 3 * cellHeight)
            {
                if (toggle[1][2] == 1 || toggle[1][2] == 2)
                {
                    // cout << "This Slot is Already Booked";
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, (2 * cellWidth) + 35, (cellHeight)+35, RED);
                        COUNT++;
                        toggle[1][2] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, (2 * cellWidth) + 55, (cellHeight)+55, BLUE);
                        COUNT++;
                        toggle[1][2] = 2;
                        FLAG++;
                    }
                }
            } // 3rd row start 20
            else if (a < cellWidth && b > 2 * cellHeight && a < 2 * cellWidth && a < 3 * cellWidth && b > cellHeight && b < 3 * cellHeight)
            {
                if (toggle[2][0] == 1 || toggle[2][0] == 2)
                {
                    // cout << "This Slot is Already Booked";
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, (cellWidth / 2) - 75, (2 * cellHeight) + 40, RED);
                        COUNT++;
                        toggle[2][0] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, (cellWidth / 2) - 50, (2 * cellHeight) + 60, BLUE);
                        COUNT++;
                        toggle[2][0] = 2;
                        FLAG++;
                    }
                }
            } // 21
            else if (a > cellWidth && b > 2 * cellHeight && a < 2 * cellWidth && a < 3 * cellWidth && b > cellHeight && b < 3 * cellHeight)
            {
                if (toggle[2][1] == 1 || toggle[2][1] == 2)
                {
                    // cout << "This Slot is Already Booked";
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, cellWidth + 38, (2 * cellHeight) + 40, RED);
                        COUNT++;
                        toggle[2][1] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, cellWidth + 60, (2 * cellHeight) + 55, BLUE);
                        COUNT++;
                        toggle[2][1] = 2;
                        FLAG++;
                    }
                }
            } // 22
            else if (a > cellWidth && b > 2 * cellHeight && a > 2 * cellWidth && a < 3 * cellWidth && b > cellHeight && b < 3 * cellHeight)
            {
                if (toggle[2][2] == 1 || toggle[2][2] == 2)
                {
                    // DrawText("This Slot is Already Used", 233, 0, 20, WHITE);
                }
                else
                {
                    x = WhoseTurn();
                    if (x == true)
                    {
                        DrawTexture(gameC, (2 * cellWidth) + 35, (2 * cellHeight) + 35, RED);
                        COUNT++;
                        toggle[2][2] = 1;
                        FLAG++;
                    }
                    else
                    {
                        DrawTexture(gameD, (2 * cellWidth) + 50, (2 * cellHeight) + 65, BLUE);
                        COUNT++;
                        toggle[2][2] = 2;
                        FLAG++;
                    }
                }
            }
        }
        SwapScreenBuffer();
    }
    void check()
    {
        if (toggle[0][0] == toggle[0][1] && toggle[0][1] == toggle[0][2]) // row check start
        {
            if (toggle[0][0] == 1)
            {
                canILiveThisWorld(1);
            }
            else if (toggle[0][0] == 2)
            {
                canILiveThisWorld(2);
            }
        }
        else if (toggle[1][0] == toggle[1][1] && toggle[1][1] == toggle[1][2])
        {
            if (toggle[1][0] == 1)
            {
                canILiveThisWorld(1);
            }
            else if (toggle[1][0] == 2)
            {
                canILiveThisWorld(2);
            }
        }
        else if (toggle[2][0] == toggle[2][1] && toggle[2][1] == toggle[2][2])
        {
            if (toggle[2][0] == 1)
            {
                canILiveThisWorld(1);
            }
            else if (toggle[2][0] == 2)
            {
                canILiveThisWorld(2);
            } /// row check end
        }
        else if (toggle[0][0] == toggle[1][0] && toggle[1][0] == toggle[2][0])
        {
            if (toggle[0][0] == 1)
            {
                canILiveThisWorld(1);
            }
            else if (toggle[0][0] == 2)
            {
                canILiveThisWorld(2);
            }
        }
        else if (toggle[0][1] == toggle[1][1] && toggle[1][1] == toggle[2][1])
        {
            if (toggle[0][1] == 1)
            {
                canILiveThisWorld(1);
            }
            else if (toggle[0][1] == 2)
            {
                canILiveThisWorld(2);
            }
        }
        else if (toggle[0][2] == toggle[1][2] && toggle[1][2] == toggle[2][2])
        {
            if (toggle[0][2] == 1)
            {
                canILiveThisWorld(1);
            }
            else if (toggle[0][2] == 2)
            {
                canILiveThisWorld(2);
            }
        }
        else if (toggle[0][0] == toggle[1][1] && toggle[1][1] == toggle[2][2])
        {
            if (toggle[0][0] == 1)
            {
                canILiveThisWorld(1);
            }
            else if (toggle[0][0] == 2)
            {

                canILiveThisWorld(2);
            }
        }
        else if (toggle[0][2] == toggle[1][1] && toggle[1][1] == toggle[2][0])
        {
            if (toggle[0][2] == 1)
            {
                canILiveThisWorld(1);
            }
            else if (toggle[0][2] == 2)
            {
                canILiveThisWorld(2);
            }
        }
        else if (FLAG == 9)
        {
            canILiveThisWorld(9);
        }
    }
    void canILiveThisWorld(int life)
    {
        if (life == 1)
        {
            DrawRectangle(0, 290, GetScreenWidth(), 60, Fade(RAYWHITE, 0.1f));
            DrawText("Game Over! Player X Win", 40, 300, 50, VIOLET);
            DrawRectangle(0, 385, GetScreenWidth(), 30, Fade(RAYWHITE, 0.1f));
            DrawText("Press R to restart or Press E to exit", 170, 390, 20, VIOLET);
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    toggle[i][j] = 1;
                }
            }
            if (IsKeyPressed(KEY_R))
            {
                main(1);
            }
            if (IsKeyPressed(KEY_E))
            {
                exit(0);
            }
        }
        else if (life == 2)
        {
            DrawRectangle(0, 290, GetScreenWidth(), 60, Fade(RAYWHITE, 0.1f));
            DrawText("Game Over! Player X Win", 40, 300, 50, BLACK);
            DrawRectangle(0, 385, GetScreenWidth(), 30, Fade(RAYWHITE, 0.1f));
            DrawText("Press R to restart or Press E to exit", 170, 390, 20, VIOLET);
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    toggle[i][j] = 2;
                }
            }
            if (IsKeyPressed(KEY_R))
            {
                main(1);
            }
            if (IsKeyPressed(KEY_E))
            {
                exit(0);
            }
        }
        else if (life == 9)
        {
            DrawRectangle(0, 290, GetScreenWidth(), 60, Fade(RAYWHITE, 0.1f));
            DrawText("Game Over! Player X Win", 40, 300, 50, VIOLET);
            DrawRectangle(0, 385, GetScreenWidth(), 30, Fade(RAYWHITE, 0.1f));
            DrawText("Press R to restart or Press E to exit", 170, 390, 20, VIOLET);
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    toggle[i][j] = 2;
                }
            }
            if (IsKeyPressed(KEY_R))
            {
                main(1);
            }
            if (IsKeyPressed(KEY_E))
            {
                exit(0);
            }
        }
    }
};
int main(int Born)
{
    clicked a;
    if (Born == 1)
    {
        COUNT = 0;
        FLAG = 0;
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                toggle[i][j] = 0;
            }
        }
        UnloadTexture(gameC);
        UnloadTexture(gameD);
    }
    int Xpos = GetMouseX();
    int Yposi = GetMouseY();
    InitWindow(screen_width, screen_height, "TIC TAC TOE GAME");
    SetTargetFPS(144);
    gameC = LoadTexture("X.png");
    gameD = LoadTexture("O.png");
    //ClearBackground(Light_Green);
    //DrawRectangle(0, 0, GetScreenWidth(), GetScreenHeight(), Light_Green);
    while (!WindowShouldClose())
    {
        BeginDrawing();
        ClearBackground(RAYWHITE);
        for (int i = 0; i < ROW; i++)
        {
            for (int j = 0; j < COL; j++)
            {
                DrawRectangle(i * cellWidth - 20, j * cellHeight -20, 5, 600, Light_Green);
                DrawRectangle(i * cellWidth - 20, j * cellHeight -20, 600, 5, Light_Green);
            }
        }
        a.printMyExistence();
        a.check();
        EndDrawing();
    }
    return 0;
}
